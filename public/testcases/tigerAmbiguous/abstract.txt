Abstract

data TVar = TSimpleVar TSymbol
          | TFieldVar (TVar,TSymbol)
          | TSubscriptVar (TVar,TExp)
  deriving (Show, Eq, Read)

data TExp = TVarExp TVar
          | TNilExp
          | TIntExp Int
          | TStringExp String
          | TCallExp TSymbol [TExp]
          | TOpExp TExp TOper TExp         -- left : exp, oper : oper, right : exp
          | TRecordExp [TFieldCre] TSymbol -- fields:[(TSymbol,TExp)], typ:Tsymbol
          | TSeqExp [TExp]
          | TAssignExp TVar TExp
          | TIfExp TExp TExp (Maybe TExp)  -- test:exp, then':exp, else':exp option
          | TWhileExp TExp TExp
          | TForExp TSymbol Bool TExp TExp TExp -- var:Tsymbol, escape:bool ref, lo:exp, hi:exp,  body:exp
          | TBreakExp
          | TLetExp [TDec] TExp
          | TArrayExp TSymbol TExp TExp
  deriving (Show, Eq, Read)

data TDec = TFunctionDec TFundec
          | TVarDec TSymbol Bool (Maybe TSymbol) TExp -- name:TSymbol, escape:bool ref, typ:Tsymbol option, init:Texp
          | TTypeDec TTyDec
  deriving (Show, Eq, Read)

data TTy = TNameTy TSymbol
         | TRecordTy [TFieldDec]
         | TArrayTy TSymbol
  deriving (Show, Eq, Read)

data TOper = TPlusOp | TMinusOp | TTimesOp | TDivideOp | TEqOp | TNeqOp | TLtOp | TLeOp | TGtOp | TGeOp
  deriving (Show, Eq, Read)


data TFieldCre = TFieldCre (TSymbol,TExp)
  deriving (Show, Eq, Read)

data TFieldDec = TFieldDec TSymbol Bool TSymbol
  deriving (Show, Eq, Read) -- name: Tsymbol, escape: bool ref, typ: Tsymbol

data TFundec = TFundec TSymbol [TFieldDec] (Maybe TSymbol) TExp
  deriving (Show, Eq, Read)

data TTyDec = TTyDec (TSymbol,TTy)
  deriving (Show, Eq, Read)

type TSymbol = String

