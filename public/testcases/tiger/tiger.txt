-- This grammar (biyacc program) still has some defect.
-- For instance, update negation with a multiplication produces an error since there is
-- no production (updating strategy) to convert a negation into a multiplication, unlike
-- the arithmetic expression example.
-- (This may also relevant: parentheses are not projected out in the parsing direction.
--  The parentheses correspond to TExpSeq in the AST.)

#Abstract

type TSymbol = String

data Tuple a b = Tuple a b
data BBool = TTrue | FFalse

data MMaybe a = NNothing | JJust a

data List a = Nil | Cons a (List a)

data TVar = TSimpleVar TSymbol
          | TFieldVar (Tuple TVar TSymbol)
          | TSubscriptVar (Tuple TVar TExp)

data TExp = TVarExp TVar
          | TNilExp
          | TIntExp Int
          | TStringExp String
          | TCallExp TSymbol (List TExp)

          -- left : exp, oper : oper, right : exp
          | TOpExp TExp TOper TExp

          -- fields:[(TSymbol,TExp)], typ:Tsymbol
          | TRecordExp (List (Tuple TSymbol TExp)) TSymbol
          | TExpSeq (List TExp)
          | TAssignExp TVar TExp

          -- test:exp, then':exp, else':exp option
          | TCond TExp TExp (MMaybe TExp)
          | TWhileExp TExp TExp

          -- var:Tsymbol, escape:bool ref, lo:exp, hi:exp,  body:exp
          | TForExp TSymbol BBool TExp TExp TExp
          | TBreakExp
          | TLetExp (List TDec) TExp
          | TArrayExp TSymbol TExp TExp

data TDec = TFunctionDec TFundec
          -- name:TSymbol, escape:bool ref, typ:Tsymbol option, init:Texp
          | TVarDec TSymbol BBool (MMaybe TSymbol) TExp
          | TTypeDec (Tuple TSymbol TTy)

data TTy = TNameTy TSymbol
         | TRecordTy (List TFieldDec)
         | TArrayTy TSymbol

data TOper = TPlusOp | TMinusOp | TTimesOp | TDivideOp
           | TEqOp | TNeqOp | TLtOp | TLeOp | TGtOp | TGeOp


-- name: Tsymbol, escape: bool ref, typ: Tsymbol
data TFieldDec = TFieldDec TSymbol BBool TSymbol

data TFundec = TFundec TSymbol (List TFieldDec) (MMaybe TSymbol) TExp


#Concrete

Program -> Exp ;

Exp -> LetExp  | RecExp     | ArrExp | Prmtv
     | ForExp  | WhileExp   | IfThen | IfThenElse
     | "break" | Assignment | Guard
     ;

Decs  -> Dec Decs | Dec ;
Dec   -> TyDec | VarDec | FunDec ;
TyDec -> "type" Identifier '=' Ty ;
Ty    -> Identifier | ArrTy | RecTy ;
ArrTy -> "array" "of" Identifier ;
RecTy -> '{' '}'  | '{' FieldDecs '}' ;

FieldDecs -> FieldDec ',' FieldDecs | FieldDec ;
FieldDec  -> Identifier ':' Identifier ;

FunDec -> "function" Identifier '(' FieldDecs ')'                '=' Exp
        | "function" Identifier '('           ')'                '=' Exp
        | "function" Identifier '(' FieldDecs ')' ':' Identifier '=' Exp
        | "function" Identifier '('           ')' ':' Identifier '=' Exp
        ;

VarDec -> "var" Identifier                ":=" Exp
        | "var" Identifier ':' Identifier ":=" Exp
        ;

LValue -> Identifier | OtherLValue ;

OtherLValue -> Identifier '[' Exp ']'
            | OtherLValue '[' Exp ']'
            | LValue '.' Identifier ;


SeqExp -> '(' ')' | '(' ExpSeq ')' ;

ExpSeq  -> Exp ';' ExpSeq  | Exp;

ExpList -> Exp ',' ExpList | Exp;

CallExp  -> Identifier '(' ExpList ')' | Identifier '(' ')';

ArrExp -> Identifier '[' Exp ']' "of" Exp ;
RecExp -> Identifier '{' '}'
        | Identifier '{' FieldCreates '}' ;

FieldCreates -> FieldCreate ',' FieldCreates | FieldCreate ;
FieldCreate  -> Identifier '=' Exp ;

Assignment -> LValue ":=" Exp ;

-- "end" is used to handle the dangling-else problem
IfThenElse -> "if" Exp "then" Exp "else" Exp ;
IfThen     -> "if" Exp "then" Exp "end";
WhileExp   -> "while" Exp "do" Exp ;
ForExp     -> "for" Identifier ":=" Exp "to" Exp "do" Exp ;
LetExp     -> "let" Decs "in" ExpSeq "end" ;

Prmtv  -> Prmtv '|'  Prmtv1
        | Prmtv1 ;

Prmtv1 -> Prmtv1 '&' Prmtv2
        | Prmtv2 ;

Prmtv2 -> Prmtv2 '='  Prmtv3
        | Prmtv2 "<>" Prmtv3
        | Prmtv2 '>'  Prmtv3
        | Prmtv2 '<'  Prmtv3
        | Prmtv2 ">=" Prmtv3
        | Prmtv2 "<=" Prmtv3
        | Prmtv3
        ;

Prmtv3 -> Prmtv3 '+'  Prmtv4
        | Prmtv3 '-'  Prmtv4
        | Prmtv4
        ;

Prmtv4 -> Prmtv4 '*'  Prmtv5
        | Prmtv4 '/'  Prmtv5
        | Prmtv5
        ;

Prmtv5 -> '-' Prmtv5
        | Numeric
        | String
        | LValue
        | SeqExp
        | CallExp
        | "nil"
        ;

Guard  -> "guard" CaseBs "end" ;
CaseBs -> CaseB CaseBs | CaseB ;
CaseB  -> LValue '=' Numeric "->" Exp ;


-- please put the update part into an additional parenthesis:
-- legal:   arith  +>  (arith +> Exp);
-- illegal: arith  +>   arith +> Exp;

-- the syntax is somehow like the one in Haskell. Space (application) have the highest priority.
-- please do not use redundant parenthesis in Left hand side of an action. we have not handled it properly.

#Directives
LineComment:  "//"      ;
BlockComment: "/*" "*/" ;

#Actions

TExp +> Program
  t     +>  [t +> Exp];
;;

TExp +> Exp
  TBreakExp        +> "break"         ;
  t@(TVarExp _)    +> [t +> Prmtv] ;
  t@(TIntExp _)    +> [t +> Prmtv] ;
  t@(TStringExp _) +> [t +> Prmtv] ;
  t@(TNilExp)      +> [t +> Prmtv] ;
  t@(TCallExp _ _) +> [t +> Prmtv] ;
  t@(TExpSeq _)    +> [t +> Prmtv] ;
  t@(TOpExp _ _ _) +> [t +> Prmtv] ;

  t@(TArrayExp _ _ _)        +> [t +> ArrExp]     ;
  t@(TRecordExp _ _)         +> [t +> RecExp]     ;
  t@(TAssignExp _ _)         +> [t +> Assignment] ;
  t@(TWhileExp _ _)          +> [t +> WhileExp]   ;
  t@(TForExp _ _ _ _ _)      +> [t +> ForExp]     ;
  t@(TLetExp _ (TExpSeq _))  +> [t +> LetExp]     ;

  t@(TCond _ _ NNothing)             +> [t +> IfThen]     ;
  t@(TCond _ _ (JJust _))            +> [t +> IfThenElse] ;
  t@(TCond _ _ (JJust (TIntExp 0)))  +>
      [t +> (Prmtv -> (Prmtv1 -> Prmtv1 '&' Prmtv2))] ;
  t@(TCond _ (TIntExp 1) _)         +>
      [t +> (Prmtv -> Prmtv '|'  Prmtv1) ] ;
  t@(TCond (TOpExp (TVarExp _) TEqOp (TIntExp _)) _ _)  +> [t +> Guard] ;
;;

-------
TExp +> SeqExp
  TExpSeq Nil               +>  '('                   ')'  ;
  TExpSeq tExps@(Cons _ _)  +>  '(' [tExps +> ExpSeq] ')' ;
;;

List TExp +> ExpSeq
  Cons e Nil            +> [e +> Exp]                  ;
  Cons e es@(Cons _ _)  +> [e +> Exp] ';' [es +> ExpSeq] ;
;;

TExp +> CallExp
  TCallExp tSym Nil           +>    [tSym +> Identifier]  '(' ')' ;
  TCallExp tSym t@(Cons _ _)  +>    [tSym +> Identifier]  '(' [t +> ExpList] ')' ;
;;

List TExp +> ExpList
  Cons e Nil              +>  [e +> Exp] ;
  -- should be at least two elements
  Cons e es@(Cons _ _)    +>  [e +> Exp] ',' [es +> ExpList] ;
;;
--------

TExp +> ArrExp
  TArrayExp tSym tExp1 tExp2  +>  [tSym +> Identifier] '[' [tExp1 +> Exp] ']' "of" [tExp2 +> Exp] ;
;;

TExp +> RecExp
  TRecordExp Nil tSym              +>  [tSym +> Identifier] '{' '}' ;
  TRecordExp tFCs@(Cons _ _) tSym  +>  [tSym +> Identifier] '{' [tFCs +> FieldCreates] '}' ;
;;

List (Tuple TSymbol TExp) +> FieldCreates
  Cons fc Nil             +>  [fc +> FieldCreate] ;
  Cons fc fcs@(Cons _ _)  +>  [fc +> FieldCreate] ',' [fcs +> FieldCreates] ;
;;

Tuple TSymbol TExp +> FieldCreate
  Tuple tSym tExp  +>   [tSym +> Identifier] '=' [tExp +> Exp] ;
;;
--------

TExp +> Assignment
  TAssignExp tVar tExp   +>   [tVar +> LValue] ":=" [tExp +> Exp] ;
;;

TExp +> WhileExp
  TWhileExp cond tExp   +> "while" [cond +> Exp] "do" [tExp +> Exp] ;
;;

TExp +> ForExp
  TForExp tSym TTrue tLow tHigh tBody  +>
    "for" [tSym +> Identifier] ":=" [tLow +> Exp] "to" [tHigh +> Exp] "do" [tBody +> Exp] ;
;;

TExp +> IfThen
  TCond cond tExp1 NNothing  +> "if" [cond +> Exp] "then" [tExp1 +> Exp] "end";
;;

TExp +> IfThenElse
  TCond cond tExp1 (JJust tExp2)  +> "if" [cond +> Exp] "then" [tExp1 +> Exp] "else" [tExp2 +> Exp];
;;

TExp +> LetExp
  TLetExp tDecs (TExpSeq tExps)  +> "let" [tDecs +> Decs] "in" [tExps +> ExpSeq] "end" ;
;;
--------

TVar +> LValue
  TSimpleVar tSym      +>  [tSym +> Identifier] ;
  t@(TSubscriptVar _)  +>  [t +> OtherLValue] ;
  t@(TFieldVar _)      +>  [t +> OtherLValue] ;
;;

TVar +> OtherLValue
  TSubscriptVar (Tuple (TSimpleVar tSym) tExp)  +> [tSym +> Identifier] '[' [tExp +> Exp] ']' ;
  TSubscriptVar (Tuple tVar tExp)               +> [tVar +> OtherLValue] '[' [tExp +> Exp] ']' ;
  TFieldVar     (Tuple tVar tSym)               +> [tVar +> LValue] '.' [tSym +> Identifier] ;
;;
--------

List TDec +> Decs
  Cons dec Nil              +>  [dec +> Dec] ;
  Cons dec decs@(Cons _ _)  +>  [dec +> Dec] [decs +> Decs] ;
;;

TDec +> Dec
  TFunctionDec fdec  +>  [fdec +> FunDec] ;
  TTypeDec (Tuple tSym ty)  +>  (TyDec -> "type" [tSym +> Identifier] '=' [ty +> Ty]) ;

  TVarDec tSym TTrue NNothing tExp       +>
    (VarDec -> "var" [tSym +> Identifier]                     ":=" [tExp +> Exp]) ;
  TVarDec tSym TTrue (JJust tSym2) tExp  +>
    (VarDec -> "var" [tSym +> Identifier] ':' [tSym2 +> Identifier] ":=" [tExp +> Exp]) ;
;;


TFundec +> FunDec
  TFundec tSym tf@(Cons _ _) NNothing tExp
    +> "function" [tSym +> Identifier] '(' [tf +> FieldDecs] ')'                     '=' [tExp +> Exp] ;
  TFundec tSym Nil NNothing tExp
    +> "function" [tSym +> Identifier] '('                   ')'                     '=' [tExp +> Exp] ;
  TFundec tSym tf@(Cons _ _) (JJust tSym2) tExp
    +> "function" [tSym +> Identifier] '(' [tf +> FieldDecs] ')' ':' [tSym2 +> Identifier] '=' [tExp +> Exp] ;
  TFundec tSym Nil (JJust tSym2) tExp
    +> "function" [tSym +> Identifier] '('                   ')' ':' [tSym2 +> Identifier] '=' [tExp +> Exp] ;
;;


---------Type---------
TTy +> Ty
  TNameTy tSym     +> [tSym +> Identifier] ;
  t@(TRecordTy _)  +> [t +> RecTy];
  t@(TArrayTy _)   +> [t +> ArrTy];
;;

TTy +> RecTy
  TRecordTy Nil                  +>  '{' '}' ;
  TRecordTy tFieldDs@(Cons _ _)  +>  '{' [tFieldDs +> FieldDecs] '}' ;
;;

TTy +> ArrTy
  TArrayTy tSym  +>  "array" "of" [tSym +> Identifier] ;
;;

List TFieldDec +> FieldDecs
  Cons tf@(TFieldDec _ TTrue _) Nil  +>  [tf  +> FieldDec] ;
  Cons tf1 tfs@(Cons _ _)            +>  [tf1 +> FieldDec] ',' [tfs +> FieldDecs] ;
;;

TFieldDec +> FieldDec
  TFieldDec tSym1 TTrue tSym2  +>  [tSym1 +> Identifier] ':' [tSym2 +> Identifier] ;
;;

-------primitive------
TExp +> Prmtv
  TCond cond (TIntExp 1) (JJust tExp2)  +>  [cond +> Prmtv] '|' [tExp2 +> Prmtv1] ;
  t                                     +>  [t  +> Prmtv1] ;
;;

TExp +> Prmtv1
  TCond cond tExp1 (JJust (TIntExp 0))  +>  [cond +> Prmtv1] '&' [tExp1 +> Prmtv2] ;
  t                                     +>  [t  +> Prmtv2] ;
;;

TExp +> Prmtv2
  TOpExp  l  TEqOp   r   +>   [l +> Prmtv2] '='  [r +> Prmtv3] ;
  TOpExp  l  TNeqOp  r   +>   [l +> Prmtv2] "<>" [r +> Prmtv3] ;
  TOpExp  l  TLtOp   r   +>   [l +> Prmtv2] '<'  [r +> Prmtv3] ;
  TOpExp  l  TLeOp   r   +>   [l +> Prmtv2] "<=" [r +> Prmtv3] ;
  TOpExp  l  TGtOp   r   +>   [l +> Prmtv2] '>'  [r +> Prmtv3] ;
  TOpExp  l  TGeOp   r   +>   [l +> Prmtv2] ">=" [r +> Prmtv3] ;
  t                      +>   [t +> Prmtv3] ;
;;

TExp +> Prmtv3
  TOpExp  l  TPlusOp  r +>  [l +> Prmtv3] '+'  [r +> Prmtv4] ;
  TOpExp  l  TMinusOp r +>  [l +> Prmtv3] '-'  [r +> Prmtv4] ;
  t                     +>  [t +> Prmtv4] ;
;;

TExp +> Prmtv4
  TOpExp  l  TTimesOp  r +>  [l +> Prmtv4] '*' [r +> Prmtv5] ;
  TOpExp  l  TDivideOp r +>  [l +> Prmtv4] '/' [r +> Prmtv5] ;
  t                      +>  [t +> Prmtv5] ;
;;

TExp +> Prmtv5
  TOpExp (TIntExp 0) TMinusOp r +> '-' [r +> Prmtv5] ;
  TVarExp v        +> [v +> LValue]  ;
  TIntExp i        +> [i +> Numeric] ;
  TStringExp s     +> [s +> String]  ;
  TNilExp          +> "nil"          ;
  t@(TCallExp _ _) +> [t +> CallExp] ;
  t@(TExpSeq _)    +> [t +> SeqExp]  ;
;;

---------- introduce Guard expression  --------
TExp +> Guard
  TCond (TOpExp (TVarExp lv) TEqOp (TIntExp i)) e1 NNothing
    +>  "guard" (CaseBs ->
                  (CaseB -> [lv +> LValue] '=' [i +> Numeric] "->" [e1 +> Exp])
                ) "end";

  TCond (TOpExp (TVarExp lv) TEqOp (TIntExp i)) e1 (JJust if2@(TCond _ _ _))
    +>  "guard" (CaseBs ->
                  (CaseB -> [lv +> LValue] '=' [i +> Numeric] "->" [e1 +> Exp])
                  [if2 +> CaseBs]
                ) "end";
;;

TExp +> CaseBs
  TCond (TOpExp (TVarExp lv) TEqOp (TIntExp i)) e1 NNothing
      +>  (CaseB -> [lv +> LValue] '=' [i +> Numeric] "->" [e1 +> Exp]) ;

  TCond (TOpExp (TVarExp lv) TEqOp (TIntExp i)) e1 (JJust if2@(TCond _ _ _))
      +>  (CaseB -> [lv +> LValue] '=' [i +> Numeric] "->" [e1 +> Exp])
          [if2 +> CaseBs] ;
;;
--------
