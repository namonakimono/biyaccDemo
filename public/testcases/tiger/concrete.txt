Concrete

-- %right 'then' 'else' 'do';

Program -> Exp ;

Exp -> 'nil'   | CallExp    | PrimitiveOpt
     | LetExp  | RecCreate  | ArrCreate
     | ForExp  | WhileExp   | IfThen | IfThenElse
     | 'break' | Assignment | Guard
     ;

Decs  -> Dec Decs | Dec ;
Dec   -> TyDec | VarDec | FunDec ;
TyDec -> 'type' Name '=' Ty ;
Ty    -> Name | ArrTy | RecTy ;
ArrTy -> 'array' 'of' Name ;
RecTy -> '{' FieldDecs '}' ;

FieldDecs -> FieldDec ',' FieldDecs | FieldDec ;
FieldDec  -> Name ':' Name ;

FunDec -> 'function' Name '(' FieldDecs ')'          '=' Exp
        | 'function' Name '('           ')'          '=' Exp
        | 'function' Name '(' FieldDecs ')' ':' Name '=' Exp
        | 'function' Name '('           ')' ':' Name '=' Exp
        ;
VarDec -> 'var' Name          ':=' Exp
        | 'var' Name ':' Name ':=' Exp
        ;

LValue -> Name | OtherLValue ;
OtherLValue -> Name '[' Exp ']' | Subscript | FieldExp;
Subscript -> OtherLValue '[' Exp ']';
FieldExp  -> LValue '.' Name;

SeqExp -> '(' ')' | '(' ExpSeq ')' ;
ExpSeq  -> Exp ';' ExpSeq  | Exp;
ExpList -> Exp ',' ExpList | Exp;

CallExp  -> Name '(' ExpList ')' | Name '(' ')';

ArrCreate -> Name '[' Exp ']' 'of' Exp ;
RecCreate -> Name '{' FieldCreates '}' ;
FieldCreates -> FieldCreate ',' FieldCreates | FieldCreate ;
FieldCreate  -> Name '=' Exp;
Assignment -> LValue ':=' Exp;

-- 'end' is used to handle the dangling-else problem
IfThenElse -> 'if' Exp 'then' Exp 'else' Exp;
IfThen     -> 'if' Exp 'then' Exp 'end';
WhileExp   -> 'while' Exp 'do' Exp ;
ForExp     -> 'for' Name ':=' Exp 'to' Exp 'do' Exp ;
LetExp     -> 'let' Decs 'in' ExpSeq 'end' ;

PrimitiveOpt  -> PrimitiveOpt '|'  PrimitiveOpt1
              |  PrimitiveOpt1 ;

PrimitiveOpt1 -> PrimitiveOpt1 '&' PrimitiveOpt2
              |  PrimitiveOpt2;

PrimitiveOpt2 -> PrimitiveOpt2 '='  PrimitiveOpt3
              |  PrimitiveOpt2 '<>' PrimitiveOpt3
              |  PrimitiveOpt2 '>'  PrimitiveOpt3
              |  PrimitiveOpt2 '<'  PrimitiveOpt3
              |  PrimitiveOpt2 '>=' PrimitiveOpt3
              |  PrimitiveOpt2 '<=' PrimitiveOpt3
              |  PrimitiveOpt3
              ;

PrimitiveOpt3 -> PrimitiveOpt3 '+'  PrimitiveOpt4
              |  PrimitiveOpt3 '-'  PrimitiveOpt4
              |  PrimitiveOpt4
              ;

PrimitiveOpt4 -> PrimitiveOpt4 '*'  PrimitiveOpt5
              |  PrimitiveOpt4 '/'  PrimitiveOpt5
              |  PrimitiveOpt5
              ;

PrimitiveOpt5 -> '-' PrimitiveOpt5
              | Int
              | String
              | LValue
              | SeqExp
              ;

Guard       -> 'guard' CaseBs 'end';
CaseBs -> CaseB CaseBs | CaseB ;
CaseB  -> LValue '=' Int '->' Exp ; -- remember to change Name and Int to Exp
