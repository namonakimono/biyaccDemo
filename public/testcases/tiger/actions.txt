-- please put the update part into an additional parenthesis:
-- legal:   arith +> (arith +> Exp);
-- illegal: arith +> arith +> Exp;

-- the syntax is somehow like the one in Haskell. Space (application) have the highest priority.
-- please do not use redundant parenthesis in Left hand side of an action. we have not handled it properly.

Actions

Tiger +> Program
t     +>  (t +> Exp);

Tiger +> Exp
t@(TigerIntLit i) +> (t +> PrimitiveOpt);
t@(TigerStrLit s) +> (t +> PrimitiveOpt);
TigerBreak        +> 'break';
TigerTypeNil      +> 'nil';

t@(TigerCall _ _)        +>  (t +> CallExp);
t@(TigerArrCreate _ _ _) +>  (t +> ArrCreate);
t@(TigerRecCreate _ _)   +>  (t +> RecCreate);
t@(TigerAssign _ _)      +>  (t +> Assignment);
t@(TigerWhile  _ _)      +>  (t +> WhileExp);
t@(TigerFor _ _ _ _)     +>  (t +> ForExp);
t@(TigerLet _ _)         +>  (t +> LetExp);

t@(TigerExpSeq _ _)      +>  (t +> PrimitiveOpt);
t@(TigerEmptySeq)        +>  (t +> PrimitiveOpt);
t@(TigerNegation _)      +>  (t +> PrimitiveOpt);

t@(TigerIfThenElse _ _ TigerSeqNil)      +>  (t +> IfThen);
t@(TigerIfThenElse _ _ _)                +>  (t +> IfThenElse);

t@(TigerIfThenElse _ _ (TigerIntLit 0))  +>  (t +> (PrimitiveOpt -> Exp '&' Exp) );
t@(TigerIfThenElse _ (TigerIntLit 1) _)  +>  (t +> (PrimitiveOpt -> (PrimitiveOpt1 -> Exp '|' Exp)) );

t@(TigerIfThenElse (TigerEq _ _ ) _ _)    +>  (t +> Guard);

t@(TigerLValueName _ )  +>  (t +> PrimitiveOpt);
t@(TigerLValueOther _)  +>  (t +> PrimitiveOpt);
t@(TigerMul _ _)        +>  (t +> PrimitiveOpt);
t@(TigerDiv _ _)        +>  (t +> PrimitiveOpt);
t@(TigerAdd _ _)        +>  (t +> PrimitiveOpt);
t@(TigerSub _ _)        +>  (t +> PrimitiveOpt);
t@(TigerEq  _ _)        +>  (t +> PrimitiveOpt);
t@(TigerNEq _ _)        +>  (t +> PrimitiveOpt);
t@(TigerGT  _ _)        +>  (t +> PrimitiveOpt);
t@(TigerLT  _ _)        +>  (t +> PrimitiveOpt);
t@(TigerGTE _ _)        +>  (t +> PrimitiveOpt);
t@(TigerLTE _ _)        +>  (t +> PrimitiveOpt);


-------
Tiger +> SeqExp
TigerEmptySeq         +>  '(' ')';
t@(TigerExpSeq e es)  +>  '(' (t +> ExpSeq) ')';

Tiger +> ExpSeq
TigerExpSeq e TigerSeqNil           +>  (e +> Exp);
TigerExpSeq e es@(TigerExpSeq _ _)  +>  (e +> Exp) ';' (es +> ExpSeq);
-------

Tiger +> CallExp
TigerCall (TigerName funname) TigerSeqNil  +>  (funname +> Name) '(' ')';
TigerCall (TigerName funname) varlist      +>  (funname +> Name) '(' (varlist +> ExpList) ')';

Tiger +> ExpList
TigerExpList e TigerSeqNil            +>  (e +> Exp);
TigerExpList e es@(TigerExpList _ _)  +>  (e +> Exp) ',' (es +> ExpList);
--------

Tiger +> ArrCreate
TigerArrCreate (TigerName n) e1 e2  +>  (n +> Name) '[' (e1 +> Exp) ']' 'of' (e2 +> Exp);

Tiger +> RecCreate
TigerRecCreate (TigerName n) fc     +>  (n +> Name) '{' (fc +> FieldCreates) '}';

Tiger +> FieldCreates
TigerFieldCreates (TigerName n) e TigerSeqNil                   +>  (FieldCreate -> (n +> Name) '=' (e +> Exp));
TigerFieldCreates (TigerName n) e fs@(TigerFieldCreates _ _ _)  +>  (FieldCreate -> (n +> Name) '=' (e +> Exp)) ',' (fs +> FieldCreates);
--------

Tiger +> Assignment
TigerAssign var e    +>  (var +> LValue) ':=' (e +> Exp);

Tiger +> WhileExp
TigerWhile cond loop +>  'while' (cond +> Exp) 'do' (loop +> Exp) ;

Tiger +> ForExp
TigerFor (TigerName n) lb ub e   +> 'for' (n +> Name) ':=' (lb +> Exp) 'to' (ub +> Exp) 'do' (e +> Exp);

Tiger +> IfThen
TigerIfThenElse i t TigerSeqNil  +> 'if' (i +> Exp) 'then' (t +> Exp) 'end';

Tiger +> IfThenElse
TigerIfThenElse  i t e  +>  'if' (i +> Exp) 'then' (t +> Exp) 'else' (e +> Exp);

Tiger +> LetExp
TigerLet decls exps     +> 'let' (decls +> Decs) 'in' (exps +> ExpSeq) 'end' ;
--------

Tiger +> Guard
TigerIfThenElse (TigerEq lv (TigerIntLit i)) e1 TigerSeqNil
  +>  'guard' (CaseBs ->
                (CaseB -> (lv +> LValue) '=' (i +> Int) '->' (e1 +> Exp))
              ) 'end';
TigerIfThenElse (TigerEq lv (TigerIntLit i)) e1 if2@(TigerIfThenElse _ _ _)
  +>  'guard' (CaseBs ->
                (CaseB -> (lv +> LValue) '=' (i +> Int) '->' (e1 +> Exp))
                (if2 +> CaseBs)
              ) 'end';

Tiger +> CaseBs
TigerIfThenElse (TigerEq lv (TigerIntLit i)) e1 TigerSeqNil
    +>  (CaseB -> (lv +> LValue) '=' (i +> Int) '->' (e1 +> Exp) ) ;
TigerIfThenElse (TigerEq lv (TigerIntLit i)) e1 if2@(TigerIfThenElse _ _ _)
    +>  (CaseB -> (lv +> LValue) '=' (i +> Int) '->' (e1 +> Exp))
        (if2 +> CaseBs) ;
--------

Tiger +> LValue
TigerLValueName  (TigerName n)  +>  (n +> Name);
TigerLValueOther o              +>  (o +> OtherLValue);

Tiger +> OtherLValue
TigerOtherLValNameExp (TigerName n) e      +>  (n +> Name) '[' (e +> Exp) ']';
TigerOtherLValSubscript o e                +>  (Subscript -> (o +> OtherLValue) '[' (e +> Exp) ']');
TigerOtherLValFieldExp lval (TigerName n)  +>  (FieldExp  -> (lval +> LValue) '.' (n +> Name) );
--------

Tiger +> Decs
TigerDecs d TigerSeqNil         +>  (d +> Dec) ;
TigerDecs d ds@(TigerDecs _ _)  +>  (d +> Dec) (ds +> Decs);

Tiger +> Dec
TigerDecTyDec  td  +>  (td +> TyDec);
TigerDecVarDec vd  +>  (vd +> VarDec);
TigerDecFunDec fd  +>  (fd +> FunDec);

Tiger +> TyDec
TigerTyDec (TigerName n) ty +> 'type' (n +> Name) '=' (ty +> Ty) ;

Tiger +> VarDec
TigerVarDec (TigerName n)  TigerTypeNil  e +> 'var' (n +> Name)                  ':=' (e +> Exp);
TigerVarDec (TigerName n) (TigerName ty) e +> 'var' (n +> Name) ':' (ty +> Name) ':=' (e +> Exp);

Tiger +> FunDec
TigerFunDec (TigerName n) TigerSeqNil TigerTypeNil   e   +>   'function' (n +> Name) '('                     ')'                  '=' (e +> Exp);
TigerFunDec (TigerName n) TigerSeqNil (TigerName ty) e   +>   'function' (n +> Name) '('                     ')' ':' (ty +> Name) '=' (e +> Exp);
TigerFunDec (TigerName n) decs        TigerTypeNil   e   +>   'function' (n +> Name) '(' (decs +> FieldDecs) ')'                  '=' (e +> Exp);
TigerFunDec (TigerName n) decs        (TigerName ty) e   +>   'function' (n +> Name) '(' (decs +> FieldDecs) ')' ':' (ty +> Name) '=' (e +> Exp);

Tiger +> Ty
TigerTyName (TigerName n) +> (n +> Name);
TigerTyArrTy arrty        +> (arrty +> ArrTy);
TigerTyRecTy recty        +> (recty +> RecTy);

Tiger +> ArrTy
TigerArrTy (TigerName n)  +> 'array' 'of' (n +> Name) ;

Tiger +> RecTy
TigerRecTy fd +> '{' (fd +> FieldDecs) '}' ;

Tiger +> FieldDecs
TigerFieldDecs d TigerSeqNil              +>  (d +> FieldDec);
TigerFieldDecs d ds@(TigerFieldDecs _ _)  +>  (d +> FieldDec) ',' (ds +> FieldDecs);

Tiger +> FieldDec
TigerFieldDec (TigerName n) (TigerName tyn)  +>  (n +> Name) ':' (tyn +> Name) ;
--------

Tiger +> PrimitiveOpt
TigerIfThenElse e1 (TigerIntLit 1) e2  +>  (e1 +> PrimitiveOpt) '|' (e2 +> PrimitiveOpt1);
t                                      +>  (t  +> PrimitiveOpt1);

Tiger +> PrimitiveOpt1
TigerIfThenElse e1 e2 (TigerIntLit 0)  +>  (e1 +> PrimitiveOpt1) '&' (e2 +> PrimitiveOpt2);
t                                      +>  (t  +> PrimitiveOpt2);

Tiger +> PrimitiveOpt2
TigerEq  l r   +>   (l +> PrimitiveOpt2) '='  (r +> PrimitiveOpt3);
TigerNEq l r   +>   (l +> PrimitiveOpt2) '<>' (r +> PrimitiveOpt3);
TigerGT  l r   +>   (l +> PrimitiveOpt2) '>'  (r +> PrimitiveOpt3);
TigerLT  l r   +>   (l +> PrimitiveOpt2) '<'  (r +> PrimitiveOpt3);
TigerGTE l r   +>   (l +> PrimitiveOpt2) '>=' (r +> PrimitiveOpt3);
TigerLTE l r   +>   (l +> PrimitiveOpt2) '<=' (r +> PrimitiveOpt3);
t              +>   (t +> PrimitiveOpt3);

Tiger +> PrimitiveOpt3
TigerAdd l r   +>  (l +> PrimitiveOpt3) '+'  (r +> PrimitiveOpt4);
TigerSub l r   +>  (l +> PrimitiveOpt3) '-'  (r +> PrimitiveOpt4);
t              +>  (t +> PrimitiveOpt4);

Tiger +> PrimitiveOpt4
TigerMul l r   +>  (l +> PrimitiveOpt4) '*'  (r +> PrimitiveOpt5);
TigerDiv l r   +>  (l +> PrimitiveOpt4) '/'  (r +> PrimitiveOpt5);
t              +>  (t +> PrimitiveOpt5) ;

Tiger +> PrimitiveOpt5
TigerNegation t         +>  '-' (t +> PrimitiveOpt5) ;
t@(TigerLValueName  _)  +>  (t +> LValue);
t@(TigerLValueOther _)  +>  (t +> LValue);
TigerIntLit i           +>  (i +> Int);
TigerStrLit t           +>  (t +> String);
t                       +>  (t +> SeqExp);

